import java.awt.*;
import java.io.*;
import java.awt.event.*;
import java.util.List;
import java.util.ArrayList;

class Key {
   int x,y,w,h,row,col,layout_row,layout_col,toggle;
   int up,down,left,right;
   String label;
}

public class Keyboard //extends Frame
{
  static int scale = 2;
  static int W = 1024/scale;
  static int H = 328/scale;

  int keys_widths[] = {54,81,108,472,82};
  int xc[] = {14,940, 14, 98,828,940, 0,784,940, 0, 56,140,700,784,940,192};
  int yc[] = { 0,  0, 70, 70, 70, 70,140,140,140,210,210,210,210,210,210,280};
  int nc[] = {16,  1,  1, 13,  1,  1, 14,  1,  1,  1,  1, 10,  1,  2,  1,  1};
  int wc[] = { 0,  4,  1,  0,  1,  4,  0,  2,  4,  0,  1,  0,  1,  0,  4,  3};
  int rc[]=  { 0,  0,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,  3,  3,  3,  4};

  String label[][] = {
    {"LeftArrow", "1","2","3","4","5","6","7","8","9","0","Plus","Minus","Pound","Home","Del"},
    {"F1"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"Cntrl"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"Q","W","E","R","T","Y","U","I","O","P","At","Aterisk","UpArrow"," "," "," "},
    {"Restore"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"F3"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"RunStop","ShiftLock","A","S","D","F","G","H","J","K","L","Colon","SemiColon","Equals"," "," "},
    {"Return"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"F5"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"Commodore"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"LeftShift"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"Z","X","C","V","B","N","M","Comma","Period","Slash"," "," "," "," "," "," "},
    {"RightShift"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"CursorDown","CursorRight"," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"F7"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"Space"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
  };

  String ch[][] = {
    {"1A", "0A","7A","0B","7B","0C","7C","0D","7D","0E","7E","0F","7F","0G","7G","0H"},
    {"4H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"2A"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"6A","1B","6B","1C","6C","1D","6D","1E","6E","1F","6F","1G","6G"," "," "," "},
    {"RESTORE"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"5H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"3A","SHIFTLOCK","2B","5B","2C","5C","2D","5D","2E","5E","2F","5F","2G","5G"," "," "},
    {"1H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"6H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"5A"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"3B"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"4B","3C","4C","3D","4D","3E","4E","3F","4F","3G"," "," "," "," "," "," "},
    {"4G"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"3H","2H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"7H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {"4A"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
  };

  public static void main(String args[]) {
    final Keyboard d = new Keyboard();
    d.gen();
  }

  public void gen() {

    System.out.println("/* Generated by Keyboard.java */");

    System.out.println("#ifndef VIRTUAL_KEYBOARD_H");
    System.out.println("#define VIRTUAL_KEYBOARD_H");
    System.out.println("");
    System.out.println("struct vkbd_key {");
    System.out.println("  int x;");
    System.out.println("  int y;");
    System.out.println("  int w;");
    System.out.println("  int h;");
    System.out.println("  int row;");
    System.out.println("  int col;");
    System.out.println("  int layout_row;");
    System.out.println("  int layout_col;");
    System.out.println("  int toggle;");
    System.out.println("  int up;");
    System.out.println("  int down;");
    System.out.println("  int left;");
    System.out.println("  int right;");
    System.out.println("};");
    System.out.println("");

    System.out.println("struct vkbd_key vkbd[] = {");
    int total = 0;
    int total_in_row = 0;
    int layout_col = -1;
    int layout_row = -1;

    int minx = 9999;
    int maxx =0;
    int miny = 9999;
    int maxy =0;

    int totals_in_row[] = new int[5];

    List<Key> keys = new ArrayList<Key>();

    for (int i=0;i<xc.length;i++) {
       if (layout_row != rc[i]) {
          layout_col = 0;
          if (layout_row >=0) { totals_in_row[layout_row] = total_in_row; }
          total_in_row = 0;
       }
       layout_row = rc[i];
       for (int j=0;j<nc[i];j++) {
         int x = xc[i]/scale + j*56/scale;
         int y = yc[i]/scale;
         int w = keys_widths[wc[i]]/scale;
         int h = 67/scale;

         if (x < minx) minx = x;
         if (x+w > maxx) maxx = x+w;
         if (y < miny) miny = y;
         if (y+h > maxy) maxy = y+h;
         
         int row,col;
         int toggle = 0;
         if (ch[i].equals("RESTORE")) {
           col = -3;
           row = -1;
         } else if (ch[i][j].equals("SHIFTLOCK")) {
           col = -4;
           row = -1;
           toggle = 1;
         } else {
           col = ch[i][j].charAt(0) - '0';
           row = ch[i][j].charAt(1) - 'A';
           if (label[i][j].equals("Commodore")) toggle=1;
           else if (label[i][j].equals("Cntrl")) toggle=1;
           else if (label[i][j].equals("LeftShift")) toggle=1;
           else if (label[i][j].equals("RightShift")) toggle=1;
         }

         Key k = new Key();
         k.x = x;
         k.y = y;
         k.w = w;
         k.h = h;
         k.row = row;
         k.col = col;
         k.layout_row = layout_row;
         k.layout_col = layout_col;
         k.label = label[i][j];
         keys.add(k);

         layout_col++; total++; total_in_row++;
       }
    }
    if (layout_row >=0) { totals_in_row[layout_row] = total_in_row; }

    // Fill in nav for keys
    for (int i=0;i<keys.size();i++) {
       Key k = keys.get(i);
       int cx = k.x + k.w/2;
       int cy = k.y + k.h/2;

       Key k2 = null;
       double mindist = Double.MAX_VALUE;
       int mink = i;
       for (int j=0;j<keys.size();j++) {
         if (j==i) continue;
         k2 = keys.get(j);
         int cx2 = k2.x + k2.w/2;
         int cy2 = k2.y + k2.h/2;
         double dist = Math.sqrt((cx-cx2)*(cx-cx2) + (cy-cy2)*(cy-cy2));
         if (dist < mindist && cy2 < cy) { mindist = dist; mink = j; }
       }
       k.up = mink;

       k2 = null;
       mindist = Double.MAX_VALUE;
       mink = i;
       for (int j=0;j<keys.size();j++) {
         if (j==i) continue;
         k2 = keys.get(j);
         int cx2 = k2.x + k2.w/2;
         int cy2 = k2.y + k2.h/2;
         double dist = Math.sqrt((cx-cx2)*(cx-cx2) + (cy-cy2)*(cy-cy2));
         if (dist < mindist && cy2 > cy) { mindist = dist; mink = j; }
       }
       k.down = mink;

       k.left = k.layout_col - 1;
       if (k.left < 0) k.left = 0;

       k.right = k.layout_col + 1;
       if (k.right >= totals_in_row[k.layout_row]) k.right = totals_in_row[k.layout_row]-1;
    }
 

    for (int i=0;i<keys.size();i++) {
       Key k = keys.get(i);
       System.out.print("   {");
       System.out.print(k.x+" ,");
       System.out.print(k.y+" ,");
       System.out.print(k.w+" ,");
       System.out.print(k.h+" ,");
       System.out.print(k.row+" ,");
       System.out.print(k.col+" ,");
       System.out.print(k.layout_row+" ,");
       System.out.print(k.layout_col+" ,");
       System.out.print(k.toggle+" ,");
       System.out.print(k.up+" ,");
       System.out.print(k.down+" ,");
       System.out.print(k.left+" ,");
       System.out.print(k.right+" ,");
       System.out.print("}, ");
       System.out.println(" /* "+i+ " " +k.label+" */");
    }

    System.out.println(" };");
    System.out.println("");

/*
    System.out.print("int max_col_for_row[] = { ");
    for (int i=0;i<totals_in_row.length;i++) {
      System.out.print(totals_in_row[i]+",");
    }
    System.out.println("};");
*/

    System.out.println("#define NUM_KEYS "+total);
    System.out.println("#define VKBD_WIDTH "+(maxx-minx+1));
    System.out.println("#define VKBD_HEIGHT "+(maxy-miny+1));
    System.out.println("#endif  // VIRTUAL_KEYBOARD_H");
  }

  public void paint(Graphics g) {
    Graphics2D g2 = (Graphics2D) g;
 
    for (int i=0;i<xc.length;i++) {
       for (int j=0;j<nc[i];j++) {
         int x = xc[i]/scale + j*56/scale;
         int y = yc[i]/scale;
         int w = keys_widths[wc[i]]/scale;
         int h = 67/scale;
         g2.drawRect(x,y,w,h);

         g2.drawString(ch[i][j],x+w/2,y+h/2 );
       }
    }

  }
}
