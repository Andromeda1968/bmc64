diff --git a/addon/fatfs/ff.c b/addon/fatfs/ff.c
index 290f577..8313de3 100644
--- a/addon/fatfs/ff.c
+++ b/addon/fatfs/ff.c
@@ -224,6 +224,9 @@
 #if FF_MULTI_PARTITION
 #define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
 #define LD2PT(vol) VolToPart[vol].pt	/* Get partition index */
+// BEGIN BCM64 Patch
+#define LD2SS(vol) VolToPart[vol].ss	/* Get start sector */
+// END BCM64 Patch
 #else
 #define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is bound to the same physical drive number */
 #define LD2PT(vol) 0			/* Find first valid partition or in SFD */
@@ -3273,12 +3276,26 @@ static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 		}
-		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
+		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced, 5:forced start sector */
+// BEGIN BMC64 Patch
+#if FF_MULTI_PARTITION
+if (i == 5) {
+			// Forced start sector
+			bsect = LD2SS(vol);
+			fmt = bsect ? check_fs(fs, bsect) : 3;
+} else {
+// END BMC64 Patch
+#endif
 		if (i != 0) i--;
 		do {							/* Find an FAT volume */
 			bsect = br[i];
 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
+// BEGIN BMC64 Patch
+#if FF_MULTI_PARTITION
+}
+#endif
+// END BMC64 Patch
 	}
 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
diff --git a/addon/fatfs/ff.h b/addon/fatfs/ff.h
index a0792b2..598d584 100644
--- a/addon/fatfs/ff.h
+++ b/addon/fatfs/ff.h
@@ -63,7 +63,10 @@ typedef unsigned long	DWORD;	/* 32-bit unsigned integer */
 #if FF_MULTI_PARTITION		/* Multiple partition configuration */
 typedef struct {
 	BYTE pd;	/* Physical drive number */
-	BYTE pt;	/* Partition: 0:Auto detect, 1-4:Forced partition) */
+// BEGIN BMC64 Patch
+	BYTE pt;	/* Partition: 0:Auto detect, 1-4:Forced partition, 5:Forced start sector, use ss) */
+	DWORD ss;	/* Forced start sector if pt==5 */
+// END BMC64 Patch
 } PARTITION;
 extern PARTITION VolToPart[];	/* Volume - Partition resolution table */
 #endif
diff --git a/addon/fatfs/ffconf.h b/addon/fatfs/ffconf.h
index eae1896..bbf174a 100644
--- a/addon/fatfs/ffconf.h
+++ b/addon/fatfs/ffconf.h
@@ -181,7 +181,7 @@
 */
 
 
-#define FF_MULTI_PARTITION	0
+#define FF_MULTI_PARTITION	1
 /* This option switches support for multiple volumes on the physical drive.
 /  By default (0), each logical drive number is bound to the same physical drive
 /  number and only an FAT volume found on the physical drive will be mounted.
diff --git a/addon/linux/bug.h b/addon/linux/bug.h
index 6b80534..0e3e97a 100644
--- a/addon/linux/bug.h
+++ b/addon/linux/bug.h
@@ -9,7 +9,7 @@
 extern "C" {
 #endif
 
-#define BUG_ON(exp)	assert (!(exp))
+#define BUG_ON(exp)	;
 #define BUG()		assert (0)
 
 void __warn (const char *file, const int line);
diff --git a/include/circle/memorymap.h b/include/circle/memorymap.h
index 538c594..1182652 100644
--- a/include/circle/memorymap.h
+++ b/include/circle/memorymap.h
@@ -26,7 +26,7 @@
 	#define MEGABYTE	0x100000
 #endif
 
-#define MEM_SIZE		(256 * MEGABYTE)		// default size
+#define MEM_SIZE		(512 * MEGABYTE)		// default size
 #define GPU_MEM_SIZE		(64 * MEGABYTE)			// set in config.txt
 #define ARM_MEM_SIZE		(MEM_SIZE - GPU_MEM_SIZE)	// normally overwritten
 
diff --git a/include/circle/sysconfig.h b/include/circle/sysconfig.h
index dd5c887..b914758 100644
--- a/include/circle/sysconfig.h
+++ b/include/circle/sysconfig.h
@@ -34,7 +34,7 @@
 // If your kernel image contains big data areas it may be required to
 // increase this value. The value must be a multiple of 16 KByte.
 
-#define KERNEL_MAX_SIZE		(2 * MEGABYTE)
+#define KERNEL_MAX_SIZE		(32 * MEGABYTE)
 
 ///////////////////////////////////////////////////////////////////////
 //
@@ -88,7 +88,7 @@
 // single core applications, because this may slow down the system
 // because multiple cores may compete for bus time without use.
 
-//#define ARM_ALLOW_MULTI_CORE
+#define ARM_ALLOW_MULTI_CORE
 
 #endif
 
@@ -98,7 +98,7 @@
 // counter (which is used without this option). It reduces the I/O load
 // too. This option cannot be used with QEMU.
 
-//#define USE_PHYSICAL_COUNTER
+#define USE_PHYSICAL_COUNTER
 
 #endif
 
@@ -123,7 +123,7 @@
 // system timing, because it triggers up to 8000 IRQs per second. For
 // compatibility with existing applications it is not set by default.
 
-//#define USE_USB_SOF_INTR
+#define USE_USB_SOF_INTR
 
 #endif
 
@@ -132,7 +132,7 @@
 // this option is that the "SpeedFactor" of your system is displayed.
 // You can reduce the time needed for booting, if you disable this.
 
-#define CALIBRATE_DELAY
+//#define CALIBRATE_DELAY
 
 ///////////////////////////////////////////////////////////////////////
 //
diff --git a/lib/alloc.cpp b/lib/alloc.cpp
index caafdff..5bb691e 100644
--- a/lib/alloc.cpp
+++ b/lib/alloc.cpp
@@ -73,7 +73,7 @@ static unsigned       s_nBlockReserve = 0x40000;
 static unsigned char *s_pNextPage;
 static unsigned char *s_pPageLimit;
 
-static TBlockBucket s_BlockBucket[] = {{0x40}, {0x400}, {0x1000}, {0x4000}, {0x10000}, {0x40000}, {0x80000}, {0}};
+static TBlockBucket s_BlockBucket[] = {{0x40}, {0x400}, {0x1000}, {0x4000}, {0x10000}, {0x40000}, {0x80000}, {0x100000}, {0x200000}, {0x400000}, {0x800000}, {0x1000000}, {0x1800000}, {0}};
 
 static TPageBucket s_PageBucket;
 
diff --git a/lib/sysinit.cpp b/lib/sysinit.cpp
index 700c43a..e1070f2 100644
--- a/lib/sysinit.cpp
+++ b/lib/sysinit.cpp
@@ -148,19 +148,21 @@ void sysinit (void)
 	vfpinit ();
 
 	// clear BSS
-	extern unsigned char __bss_start;
-	extern unsigned char _end;
-	for (unsigned char *pBSS = &__bss_start; pBSS < &_end; pBSS++)
-	{
-		*pBSS = 0;
-	}
+        asm(
+	"ldr	r1,	=__bss_start\n\t"
+	"ldr	r2,	=_end\n\t"
+	"mov	r3,	#0x00\n\t"
+        "_clear_bss:\n\t"
+	"cmp	r1,r2\n\t"
+	"strne 	r3,[r1],#+4\n\t"
+	"bne 	_clear_bss\n\t"
+        );
 
 	CMachineInfo MachineInfo;
 
 #if STDLIB_SUPPORT >= 2
 	CMemorySystem Memory;
 #endif
-
 	// call construtors of static objects
 	extern void (*__init_start) (void);
 	extern void (*__init_end) (void);
diff --git a/lib/usb/usbdevicefactory.cpp b/lib/usb/usbdevicefactory.cpp
index 541aba4..9694acb 100644
--- a/lib/usb/usbdevicefactory.cpp
+++ b/lib/usb/usbdevicefactory.cpp
@@ -98,7 +98,7 @@ CUSBFunction *CUSBDeviceFactory::GetDevice (CUSBFunction *pParent, CString *pNam
 	}
 	else if (pName->Compare ("ven424-ec00") == 0)
 	{
-		pResult = new CSMSC951xDevice (pParent);
+		//pResult = new CSMSC951xDevice (pParent);
 	}
 	else if (pName->Compare ("ven424-7800") == 0)
 	{
